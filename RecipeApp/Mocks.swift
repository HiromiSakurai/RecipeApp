///
/// @Generated by Mockolo
///



import Alamofire
import Foundation
import RxCocoa
import RxRelay
import RxSwift
import UIKit
@testable import RecipeAppKit


class ClientMock: Client {
    init() { }


    var requestCallCount = 0
    var requestHandler: ((Any) -> (Any))?
    func request<Response>(_ endpoint: Endpoint<Response>) -> Single<Response> {
        requestCallCount += 1
        if let requestHandler = requestHandler {
            return requestHandler(endpoint) as! Single<Response>
        }
        fatalError("requestHandler returns can't have a default value thus its handler must be set")
    }
}

public class RecipeModelMock: RecipeModel {
    public init() { }


    public var recipeListStreamCallCount = 0
    public var recipeListStreamHandler: (() -> (Observable<[Recipe]>))?
    public func recipeListStream() -> Observable<[Recipe]> {
        recipeListStreamCallCount += 1
        if let recipeListStreamHandler = recipeListStreamHandler {
            return recipeListStreamHandler()
        }
        return Observable<[Recipe]>.empty()
    }

    public var retrieveRecipeCallCount = 0
    public var retrieveRecipeHandler: ((Int) -> (Recipe?))?
    public func retrieveRecipe(using index: Int) -> Recipe? {
        retrieveRecipeCallCount += 1
        if let retrieveRecipeHandler = retrieveRecipeHandler {
            return retrieveRecipeHandler(index)
        }
        return nil
    }
}

public class FavoriteModelMock: FavoriteModel {
    public init() { }


    public var favoriteListStreamCallCount = 0
    public var favoriteListStreamHandler: (() -> (Observable<[Recipe]>))?
    public func favoriteListStream() -> Observable<[Recipe]> {
        favoriteListStreamCallCount += 1
        if let favoriteListStreamHandler = favoriteListStreamHandler {
            return favoriteListStreamHandler()
        }
        return Observable<[Recipe]>.empty()
    }

    public var addFavoriteCallCount = 0
    public var addFavoriteHandler: ((Recipe) -> ())?
    public func addFavorite(recipe: Recipe)  {
        addFavoriteCallCount += 1
        if let addFavoriteHandler = addFavoriteHandler {
            addFavoriteHandler(recipe)
        }
        
    }

    public var deleteFavoriteCallCount = 0
    public var deleteFavoriteHandler: ((Recipe) -> ())?
    public func deleteFavorite(recipe: Recipe)  {
        deleteFavoriteCallCount += 1
        if let deleteFavoriteHandler = deleteFavoriteHandler {
            deleteFavoriteHandler(recipe)
        }
        
    }

    public var isFavoriteCallCount = 0
    public var isFavoriteHandler: ((Recipe) -> (Bool))?
    public func isFavorite(recipe: Recipe) -> Bool {
        isFavoriteCallCount += 1
        if let isFavoriteHandler = isFavoriteHandler {
            return isFavoriteHandler(recipe)
        }
        return false
    }
}

class RecipeListViewModelMock: RecipeListViewModel {
    init() { }


    var recipeCellViewDataStreamCallCount = 0
    var recipeCellViewDataStreamHandler: (() -> (Driver<[SectionOfRecipeCellViewData]>))?
    func recipeCellViewDataStream() -> Driver<[SectionOfRecipeCellViewData]> {
        recipeCellViewDataStreamCallCount += 1
        if let recipeCellViewDataStreamHandler = recipeCellViewDataStreamHandler {
            return recipeCellViewDataStreamHandler()
        }
        fatalError("recipeCellViewDataStreamHandler returns can't have a default value thus its handler must be set")
    }

    var toggleFavoriteCallCount = 0
    var toggleFavoriteHandler: ((IndexPath) -> ())?
    func toggleFavorite(at indexPath: IndexPath)  {
        toggleFavoriteCallCount += 1
        if let toggleFavoriteHandler = toggleFavoriteHandler {
            toggleFavoriteHandler(indexPath)
        }
        
    }
}

class FavoriteListViewModelMock: FavoriteListViewModel {
    init() { }


    var favoriteCellViewDataStreamCallCount = 0
    var favoriteCellViewDataStreamHandler: (() -> (Driver<[SectionOfFavoriteCellViewData]>))?
    func favoriteCellViewDataStream() -> Driver<[SectionOfFavoriteCellViewData]> {
        favoriteCellViewDataStreamCallCount += 1
        if let favoriteCellViewDataStreamHandler = favoriteCellViewDataStreamHandler {
            return favoriteCellViewDataStreamHandler()
        }
        fatalError("favoriteCellViewDataStreamHandler returns can't have a default value thus its handler must be set")
    }

    var favoriteCountStreamCallCount = 0
    var favoriteCountStreamHandler: (() -> (Driver<Int>))?
    func favoriteCountStream() -> Driver<Int> {
        favoriteCountStreamCallCount += 1
        if let favoriteCountStreamHandler = favoriteCountStreamHandler {
            return favoriteCountStreamHandler()
        }
        fatalError("favoriteCountStreamHandler returns can't have a default value thus its handler must be set")
    }
}

class DiskMock: Disk {
    init() { }


    var getObjectCallCount = 0
    var getObjectHandler: ((FileName) -> (Any?))?
    func getObject<T: Decodable>(filename: FileName) -> T? {
        getObjectCallCount += 1
        if let getObjectHandler = getObjectHandler {
            return getObjectHandler(filename) as? T
        }
        return nil
    }

    var writeObjectCallCount = 0
    var writeObjectHandler: ((FileName, Any) -> ())?
    func writeObject<T: Encodable>(filename: FileName, jsonEncodable: T)  {
        writeObjectCallCount += 1
        if let writeObjectHandler = writeObjectHandler {
            writeObjectHandler(filename, jsonEncodable)
        }
        
    }
}

